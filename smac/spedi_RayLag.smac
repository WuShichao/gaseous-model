#| macros :
#| --------
#|   ray_lag_glob ray_lag_Ncomp read_ray_lag_Ncomp plot_ray_lag_Ncomp
#|   set_plot_ray_lag_Ncomp_ put_mass_frac_ray_lag_labels_
#|   plot_ray_lag_spedi_bg comp_spedi_ray_lag_glob
#|
ray_lag_glob
		spedi_load spedi_utilities.smac
		def RAY_LAG_GLOB
		read_ray_lag_Ncomp
		plot_ray_lag_Ncomp	
ray_lag_Ncomp
		spedi_load spedi_utilities.smac
		undef RAY_LAG_GLOB
		def LABELS_AT_START
		read_ray_lag_Ncomp
		plot_ray_lag_Ncomp

read_ray_lag_Ncomp
		if ($?T_max==0) {
		   define T_max_ 1e30
		} else {
		   define T_max_ $T_max
		}
		if ($?T_min==0) {
		   define T_min_ 0
		} else {
		   define T_min_ $T_min
		}
		
		if ($?MIN_FRAC_MASS==1 && $?RAY_LAG_GLOB==0) {
		   define _MIN_FRAC_MASS_ $MIN_FRAC_MASS
		} else {
		   define _MIN_FRAC_MASS_ 0
		}
		
		# Read Gamma value for Coulomb Log
		!gunzip --force --to-stdout star1.list(|.gz) | grep GAMMA | sed 's/.*GAMMA= *//; s/XBIN2..*//' > _TMP$!pid_script_sm""_
 		data _TMP$!pid_script_sm""_
		read { Gamma_spedi 1 }
		!gunzip --force --to-stdout star1.list(|.gz) | grep 'XNTOT=' | sed 's/..*XNTOT= *//' > _TMP$!pid_script_sm""_
		read { Ntot_spedi 1 }
		!gunzip --force  --to-stdout star1.list(|.gz) | grep '^ *TRH=' > _TMP$!pid_script_sm""_
		read { TRH_spedi 2 TSPITZ_spedi 4 }
 		!rm _TMP$!pid_script_sm""_
		define coef_time_spedi $(ln(Gamma_spedi*Ntot_spedi)/Ntot_spedi)
		#define coef_time_spedi 1
		#define coef_time_spedi $(1/TSPITZ_spedi)
		if ($?COEF_TIME_SPEDI==1) { define coef_time_spedi $($coef_time_spedi*$COEF_TIME_SPEDI) }
		define coef_radius_spedi 1
		if ($?COEF_RADIUS_SPEDI==1) { define coef_radius_spedi $($coef_radius_spedi*$COEF_RADIUS_SPEDI) }
 		
		if (is_vector(frac_lag_spedi)==0) {
		   if ($?RAY_LAG_GLOB==0) {
		      set frac_lag_spedi_={ 1e-3 0.01 0.1 0.25 0.5 0.75 0.9 }
		   } else {
		      set frac_lag_spedi_={ 1e-4 3e-4 1e-3 3e-3 0.01 0.03 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 0.95 }
		   }
		} else {
		   set frac_lag_spedi_=frac_lag_spedi
		}
		sort { frac_lag_spedi_ }
		set frac_str=''
		do i=0,dimen(frac_lag_spedi_)-1 {
		   set frac_str=frac_str + ' $(frac_lag_spedi_[$i])'
		}
		define perl_script "$HOME/GAS_MODEL/util/CreateLagrRadFilesFromListFile.pl"
		! [[ -f $perl_script ]]
		if ($exit_status!=0) { define perl_script CreateLagrRadFilesFromListFile.pl }
		!gunzip --force  --to-stdout star1.list(|.gz) | $perl_script $(frac_str)
		! ls -1 lagr_radii_*.asc | cut -d "_" -f3 | cut -d "." -f1 | sort -n | tail -n1 > _TMP$!pid_script_sm""_
		data _TMP$!pid_script_sm""_
		read { Ncomp 1 }
		define Ncomp_eff $(Ncomp)
		! rm _TMP$!pid_script_sm""_
		define icomp_max $(Ncomp)
		if (Ncomp==1) {
		   define icomp_max 0
		}
		if ($?RAY_LAG_GLOB==1 || Ncomp==1) {
		   define Ncomp_eff 0
		}
		
		set y_min=1e30
		set y_max=-1e30

		do icomp=0,$icomp_max {
		   lit_fort lagr_radii_$icomp.asc
		   set Vectors=Noms_Var_Fich_Fort_
		   set _i_=0
		   set last_value=-1
		   if ($?RHOC_AS_ABS==0) {
		      do i=1,dimen(Time)-1 {
		         if (Time[$i]>last_value) { 
		            set _i_ = _i_ concat < $i >
		            set last_value = Time[$i]
		         }
		      }
		   } else {
		      do i=1,dimen(Rho_c)-1 {
		         if (Rho_c[$i]>last_value) { 
		            set _i_ = _i_ concat < $i >
		            set last_value = Rho_c[$i]
		         }
		      }
		   }
		   set Time_$icomp=$coef_time_spedi*Time
		   set Mass_$icomp=TotalComponentMass
		   set _i_=_i_ if (Time_$icomp>=$T_min_ && Time_$icomp<=$T_max_ && Mass_$icomp>=$_MIN_FRAC_MASS_)
		   set Time_$icomp=$coef_time_spedi*Time[_i_]
		   if ($?T_RH==1) { set Time_$icomp=Time_$icomp/$T_RH }
		   set Mass_$icomp=TotalComponentMass[_i_]
		   set Rho_c_$icomp=Rho_c[_i_]
		   do i=3,dimen(Vectors)-1 {
		      set l$(Vectors[$i])_$icomp = lg($coef_radius_spedi*$(Vectors[$i])[_i_])
		      vecminmax l$(Vectors[$i])_$icomp _min_ _max_
		      if ($?RAY_LAG_GLOB==0 || $icomp==0) { 
		         set y_min=(y_min>$_min_)?$_min_:y_min
		         set y_max=(y_max<$_max_)?$_max_:y_max
		      }
		   }
		}
		get_spedi_MF
		if ($?KEEP_DATA_FILES==0) { 
		   ! rm lagr_radii_*.asc
		}
		# try to determine Tcc
		set _x_ local
		set _y_ local
		#set _y_=Time_0
		#set _x_=10**(l$(Vectors[2])_0)
		set _y_=Time_$icomp_max
		set _x_=10**(l$(Vectors[3])_$icomp_max)
		sort { _x_ _y_ }
		set _r_=0
		interp2 _x_ _y_ _r_ Tcc
		echo "Possible core collapse at Tcc = "$(Tcc)
		if ($?IMPOSED_TCC==1) { 
		   set Tcc=$IMPOSED_TCC
		   echo "Imposed Tcc = "$(Tcc)
		}
		do icomp=0,$Ncomp_eff { # compute time to Tcc
		   set lTtoTcc_$icomp=lg(1-Time_$icomp/Tcc)
		}
		
plot_ray_lag_Ncomp
		if ($Ncomp_eff==0) {
		   set ctypes_={ black }
		   set ltypes_={ 0 }
		} else {
		   set ctypes_={ black green cyan blue magenta red }
		   set ones={1 1 1 1 1}
		   set ltypes_={ 1 } concat 0*ones concat 2*ones concat 3*ones concat 4*ones concat 5*ones concat 6*ones concat 1*ones
		}

		if ($?_SUPER_==0) {
		   set_plot_ray_lag_Ncomp_
		}

		if ($?BACKGRND_PLOT_SPEDI==1) {
		   save_constants
		   $BACKGRND_PLOT_SPEDI
		   restore_constants
		}
		
		ptype 12 3
		expand 1.001

		do icomp=0,$Ncomp_eff {
		   if ($?_SUPER_==0) {
		      if ($icomp==0) {
		         ltype $(ltypes_[0])
		         ctype $(ctypes_[0])
		      } else {
		         ltype $(ltypes_[($icomp-1)%(dimen(ltypes_)-1)+1])
		         ctype $(ctypes_[($icomp-1)%(dimen(ctypes_)-1)+1])
		      }
		      if ($?IMPOSED_LTYPE==1) { ltype $IMPOSED_LTYPE }
		   }
		   do i=3,dimen(Vectors)-1 {
		      if ($?TIME_TO_TCC==0) {
		         if ($?ABS_LOG==1) {
		            if ($?RHOC_AS_ABS==0) {
		               connect (lg(Time_$icomp)) l$(Vectors[$i])_$icomp if (Time_$icomp>0 && lg(Time_$icomp)>=$_X_MIN_ && lg(Time_$icomp)<=$_X_MAX_ && lg(Time_$icomp)<=10*$fx2)
		            } else {
		               connect (lg(Rho_c_$icomp)) l$(Vectors[$i])_$icomp if (Time_$icomp>0)
		               set _x_=lg(Rho_c_$icomp)
		               set _y_=l$(Vectors[$i])_$icomp
		               sort { _y_ _x_ }
		               if (_x_[0]<lg(Rho_c_$icomp[dimen(Rho_c_$icomp)-1]) && _x_[0]>lg(Rho_c_$icomp[0])) {
		                  relocate $(_x_[0]) $(_y_[0])
		                  dot
		               }
		            }  
		         } else {
		            if ($?RHOC_AS_ABS==0) {
		               connect Time_$icomp l$(Vectors[$i])_$icomp if (Time_$icomp>$T_min_ && Time_$icomp<$T_max_ && Time_$icomp<10*$fx2) #if (Time_$icomp>$fx1 && Time_$icomp<10*$fx2)
		            } else {
		               connect Rho_c_$icomp l$(Vectors[$i])_$icomp if (Time_$icomp>$T_min_ && Time_$icomp<$T_max_) #if (Time_$icomp>$fx1 && Time_$icomp<10*$fx2)
		            }
		         }
		      } else {
		         connect lTtoTcc_$icomp l$(Vectors[$i])_$icomp
		         set _x_=lTtoTcc_$icomp
		         set _y_=l$(Vectors[$i])_$icomp
		         sort { _y_ _x_ }
		         if (_x_[0]>lTtoTcc_$icomp[dimen(lTtoTcc_$icomp)-1] && _x_[0]<lTtoTcc_$icomp[0]) {
		            relocate $(_x_[0]) $(_y_[0])
		            dot
		         }
		      }
		   }
		}
		if ($?COEF_TIME_SPEDI==1) {
		   expand 1.0001
		   ltype 0
		   relocate ( 7000 10000 )
		   putlabel 6 "Coef on time (gas model): $!COEF_TIME_SPEDI"
		   define COEF_TIME_SPEDI delete
		}
		if ($?COEF_RADIUS_SPEDI==1) {
		   expand 1.0001
		   ltype 0
		   relocate ( 7000 8000 )
		   putlabel 6 "Coef on radius (gas model): $!COEF_RADIUS_SPEDI"
		   define COEF_RADIUS_SPEDI delete
		}
		
		if ($?_SUPER_==0) {
		   put_mass_frac_ray_lag_labels_
		}
		
		ctype black
		ltype 0

		# Mass function legend
		if ($?_SUPER_==0) {
		   expand 0.9
		   if ($?X0==0) { define _X0_ 0.07  } else { define _X0_ $X0 }
		   if ($?Y0==0) { define _Y0_ 0.25  } else { define _Y0_ $Y0 }
		   if ($?dX==0) { define _dX_ 0.04  } else { define _dX_ $dX }
		   if ($?dY==0) { define _dY_ 0.03  } else { define _dY_ $dY }
		   if ( $?OUTSIDE_MF_LEGEND==1 ) {
		      location 5000 32400 500 29000
		      define _X0_ 0.74
		      define _Y0_ 0.99
		      define _dX_ 0.03
		      define _dY_ 0.027
		      if($Ncomp_eff>30) {
		         define _dY_ 0.0183
		      }
		      expand 0.85   
		   }
		   limits 0 1 0 1
		   if ($Ncomp_eff>0) {
		      define _i_ 0
		      ltype $(ltypes_[0])
		      ctype $(ctypes_[0])
		      relocate $($_X0_) $($_Y0_-$_i_*$_dY_)
		      draw $($_X0_+2*$_dX_) $($_Y0_-$_i_*$_dY_)
		      ltype 0
		      relocate $($_X0_+2.3*$_dX_) $($_Y0_-$_i_*$_dY_)
		      putlabel 6  <m>\,=\,$(sprintf('%3.2f',m_averg_spedi))\,M_{\odot}
		      define _i_ $($_i_+1.3)
		      relocate $($_X0_+1.5*$_dX_) $($_Y0_-$_i_*$_dY_)
		      putlabel 6 m_i (M_{\odot})
		      relocate $($_X0_+5.9*$_dX_) $($_Y0_-$_i_*$_dY_)
		      putlabel 6 f_m
		      define _i_ $($_i_+0.3)
		      do icomp=1,$Ncomp_eff {
		         define _i_ $($_i_+1)
		         ltype $(ltypes_[($icomp-1)%(dimen(ltypes_)-1)+1])
		         ctype $(ctypes_[($icomp-1)%(dimen(ctypes_)-1)+1])
		         expand 0.7   
		         relocate $($_X0_-0.05*$_dX_) $($_Y0_-$_i_*$_dY_)
		         putlabel 4 $($icomp)"\,"
		         relocate $($_X0_) $($_Y0_-$_i_*$_dY_)
		         draw $($_X0_+2*$_dX_) $($_Y0_-$_i_*$_dY_)
		         ltype 0
		         if($Ncomp_eff>30) {
		            expand 0.7
		         } else {
		            expand 0.9
		         }
		         relocate $($_X0_+2.3*$_dX_) $($_Y0_-$_i_*$_dY_)
		         putlabel 6 $(sprintf('%3.2f',m_comp_spedi[$icomp-1]))
		         relocate $($_X0_+5.5*$_dX_) $($_Y0_-$_i_*$_dY_)
		         putlabel 6 $(sprintf('%5.4f',fM_comp_spedi[$icomp-1]))
		      }
		   }     
		
		   ctype black
		   ltype 0
		}
		location $gx1_ $gx2_ $gy1_ $gy2_
		limits $fx1_ $fx2_ $fy1_ $fy2_
		re_init_graph

plot_spedi_MF # Nice graphical representation of the MF discretisation
		get_spedi_MF
		init_graph
		lweight 3
		location 5500 31000 10000 28000

		if ($?ABS_LOG==1) {
		   set x_=lg(m_comp_spedi)
		} else {
		   set x_=m_comp_spedi
		}
		set y1_=lg(fM_comp_spedi)
		set y2_=lg(fN_comp_spedi)
		limits x_ (y1_ concat y2_)
		if ($?ABS_LOG==1) {
		   ticksize -1 0 -1 0
		} else {
		   ticksize 0 0 -1 0
		}
		expand 2
		box
		xlabel Component stellar mass in M_\odot
		ylabel Fraction
		expand 3
		do i=0,dimen(m_comp_spedi)-1{
		   ltype $(ltypes_[($i)%(dimen(ltypes_)-1)+1])
		   ctype $(ctypes_[($i)%(dimen(ctypes_)-1)+1])
		   set _y_=(y1_[$i]>y2_[$i]) ? y1_[$i] : y2_[$i]
		   relocate $(x_[$i]) $fy1
		   draw $(x_[$i]) $(_y_)
		   ltype 0
		   ptype 4 3
		   relocate $(x_[$i]) $(y1_[$i])
		   dot
		   ptype 20 3
		   relocate $(x_[$i]) $(y2_[$i])
		   dot
		}

		re_init_graph
		
		
set_plot_ray_lag_Ncomp_
		init_graph
		get_spedi_units
		if ( $?RAY_LAG_GLOB==0 && $?OUTSIDE_MF_LEGEND==1 ) {
		   location 4400 24000 3500 29000
		   expand 1.4  
		} else {
		   if ($?PHYS_UNITS==0) {
		      location 5000 31000 5000 31000
		   } else {
		      location 5000 27500 5000 28000
		   }
		   expand 1.35
		}
		lweight 2
		if ($?FIGER_LIMITES==0) {
		   if ($?TIME_TO_TCC==0) {
		      if ($?ABS_LOG==1) {
		         if ($?RHOC_AS_ABS==0) {
		            set lT=lg(Time_0) if (Time_0>0)
		            limits lT ( y_min concat y_max )
		         } else {
		            limits (lg(Rho_c_0)) ( y_min concat y_max )
		         }
		      } else {
		         if ($?RHOC_AS_ABS==0) {
		            limits Time_0 ( y_min concat y_max )
		         } else {
		            limits Rho_c_0 ( y_min concat y_max )
		         }
		      }
		   } else {
		      limits lTtoTcc_0 ( y_min concat y_max )
		      limits $fx2 $fx1 $fy1 $fy2
		   }
		   if ($?LABELS_AT_START==0) {
		      limits $fx1  $($fx1+1.07*($fx2-$fx1)) $fy1 $fy2
		   } else {
		      limits $($fx2-1.07*($fx2-$fx1)) $fx2 $fy1 $fy2
		   }
		}
		if ($?X_MIN==1) { 
		   if ($?ABS_LOG==0) {
		      define _X_MIN_ $X_MIN
		   } else {
		      define _X_MIN_ $(lg($X_MIN))
		   }
		} else {
		   define _X_MIN_ $fx1
		}
		if ($?X_MAX==1) { 
		   if ($?ABS_LOG==0) {
		      define _X_MAX_ $X_MAX
		   } else {
		      define _X_MAX_ $(lg($X_MAX))
		   }
		} else {
		   define _X_MAX_ $fx2
		}
		
		define fx1_ $fx1
		define fx2_ $fx2
		define fy1_ $fy1
		define fy2_ $fy2
		define gx1_ $gx1
		define gx2_ $gx2
		define gy1_ $gy1
		define gy2_ $gy2
		if ($?ABS_LOG==1) {
		   ticksize -1 0 -1 0
		} else {  
		   ticksize 0 0 -1 0
		}
		if  ($?TIME_TO_TCC==1) {
		   ticksize -1 0 -1 0
		}
		box 1 2 3 3
		if ($?TIME_TO_TCC==0) {
		   if ($?RHOC_AS_ABS==0) {
		      if ($?T_RH==0) {
		         xlabel Time in FP units
		      } else {
		         xlabel Time in {\it T}_{rh}{\-1{(0)}}
		      }
		   } else {
		      xlabel Central density in {\it N}-body units
		   }
		} else {
		   xlabel ({\it T}_{cc}-{\it T})/{\it T}_{cc}
		}
		ylabel Radius in {\it N}-body units

		if ($?PHYS_UNITS==0) {
		   box 3 3 0 0
		} else {
		   limits $($fx1+lg($trh_yr)) $($fx2+lg($trh_yr)) $($fy1+lg($unit_r_pc)) $($fy2+lg($unit_r_pc)) 
		   box 4 4 1 2
		   relocate ( $(0.5*($gx1+$gx2)) $($gy2+0.10*($gy2-$gy1)) )
		   putlabel 5 Time in years
		   relocate ( $($gx2+0.16*($gx2-$gx1)) $(0.5*($gy1+$gy2))  )
		   angle 90
		   putlabel 5 Radius in pc
		   angle 0
		}
		limits $fx1_ $fx2_ $fy1_ $fy2_
		   

put_mass_frac_ray_lag_labels_
		ctype black 
		ltype 0
		expand 0.75
		set lT=lg(Time_0) #if (Time_0>0)
		do i=3,dimen(Vectors)-1 {
		   if ($?LABELS_AT_START==0) {
		      if ($?TIME_TO_TCC==0) {
		         if ($?ABS_LOG==1) {
		            if ($?RHOC_AS_ABS==0) {
		               set _x_=lT                if (lT<=$_X_MAX_ && lT>=$_X_MIN_)
		               set _y_=l$(Vectors[$i])_0 if (lT<=$_X_MAX_ && lT>=$_X_MIN_)
		               relocate $(_x_[dimen(_x_)-1]) $(_y_[dimen(_x_)-1]) 
		            } else {
		               relocate $(lg(Rho_c_0[dimen(Rho_c_0)-1])) $(l$(Vectors[$i])_0[dimen(Rho_c_0)-1])
		            }
		         } else {  
		            if ($?RHOC_AS_ABS==0) {
		               relocate $(Time_0[dimen(Time_0)-1]) $(l$(Vectors[$i])_0[dimen(Time_0)-1])
		            } else {
		               relocate $(Rho_c_0[dimen(Rho_c_0)-1]) $(l$(Vectors[$i])_0[dimen(Rho_c_0)-1])
		            }
		         }
		      } else {
		         relocate $(lTtoTcc_0[dimen(lTtoTcc_0)-1]) $(l$(Vectors[$i])_0[dimen(lTtoTcc_0)-1])
		      }
		      putlabel 6 "\,$!(frac_lag_spedi_[$i-3])"
		   } else {
		      if ($?TIME_TO_TCC==0) {
		         if ($?ABS_LOG==1) {
		            if ($?RHOC_AS_ABS==0) {
		               set _x_=lT if (lT<=$_X_MAX_ && lT>=$_X_MIN_)
		               set _y_=l$(Vectors[$i])_0 if (lT<=$_X_MAX_ && lT>=$_X_MIN_)
		               relocate $(_x_[0]) $(_y_[0]) 
		            } else {
		               relocate $(lg(Rho_c_0[0])) $(l$(Vectors[$i])_0[0])
		            }
		         } else {  
		            if ($?RHOC_AS_ABS==0) {
		               relocate $(Time_0[0]) $(l$(Vectors[$i])_0[0])
		            } else {
		               relocate $(Rho_c_0[0]) $(l$(Vectors[$i])_0[0])
		            }
		         }   
		      } else         {
		         relocate $(lTtoTcc_0[0]) $(l$(Vectors[$i])_0[0])
		      }
		      putlabel 4 "$!(frac_lag_spedi_[$i-3])\,"
		   }
		}

plot_ray_lag_spedi_bg
		define _SUPER_ 1
		ctype magenta
		ltype 5
		ray_lag_glob
		define _SUPER_ delete
		ctype black
		ltype 0
		
comp_spedi_ray_lag_glob 1 # comparison MC--spedi ($1 is the name of the MC simulation)
		lit_ray_lag $1
		# find initial half-mass radius (for normalization purposes)
		set dimen(Rini_)=dimen(frac_Rlag)
		do _i_=0,dimen(frac_Rlag)-1{
		   set Rini_[$_i_] = $(namevec_Rlag[$_i_])[0]
		}
		set one_half=0.5
		interp2 frac_Rlag Rini_ one_half Rhalf_ini
		
		set frac_lag_spedi=frac_Rlag
		undef LABELS_AT_START
		define BACKGRND_PLOT "plot_ray_lag_spedi_bg"
		rep_ray_lag
		define BACKGRND_PLOT delete
		
set_FracM_Ato
		set frac_lag_spedi = {\
		0.0001 0.0002 0.0005 0.0008 0.001 0.0012 0.0014 0.0016 0.0018 \
		0.002 0.0022 0.0024 0.0026 0.0028 0.003 0.0035 0.004 0.005 0.008 \
		0.01 0.02 0.05 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 0.95 0.99 \
		}


spedi_load 1
		if ($?spedi_smac_path==0) { define spedi_smac_path "$!HOME/GAS_MODEL/smac" }
		macro read "$!spedi_smac_path/$!1"
